{"version":3,"sources":["Input.js","Timer.js","Task.js","TaskList.js","TaskHandler.js","Habit.js","HabitList.js","HabitHandler.js","App.js","index.js"],"names":["Input","props","useState","userInput","setUserInput","console","log","id","onChange","event","target","value","placeholder","type","name","Timer","seconds","setSeconds","isRunning","setIsRunning","useEffect","window","setTimeout","clearTimeout","time","s","secs","mins","Math","floor","timeArr","restTime","setMinutes","minutes","display","mode","className","onClick","Task","todo","toggleTodo","checked","complete","TaskList","todos","map","key","TaskHandler","setTodos","todoNameRef","useRef","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","newTodos","find","ref","e","current","prevTodos","uuidv4","filter","Habit","habit","toggleHabit","HabitList","habits","HabitHandler","setHabits","habitNameRef","storedHabits","newHabits","prevHabits","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00391a44.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Input = (props) => {\n    const [userInput, setUserInput] = useState(\"\");\n    // let userInput = 0;\n\n    function handleChange(event) {\n        // userInput = event.target.value;\n        setUserInput(event.target.value)\n    }\n    console.log('userInput: ', userInput)\n    return (\n\n        <div id=\"time-input\">\n            {/* <div className=\"timerPosition svgDimensions\">\n                <svg height=\"100%\" width=\"100%\">\n                    <circle cx=\"50%\" cy=\"50%\" r=\"49%\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" />\n                </svg>\n            </div> */}\n            <input id=\"min\"\n\n                onChange={handleChange}\n                placeholder=\"minutes\"\n                type=\"number\"\n                name=\"minutes\"\n            />\n            {/* <button className=\"square-rounded-corners\"\n                onClick={() => {\n                    props.setMinutes(userInput);\n\n                    // setUserInput();\n                }}\n            >&#9094;</button> */}\n        </div>\n    )\n\n}\n\nexport default Input;","import React, { useState, useEffect } from \"react\";\nimport Input from \"./Input\";\n// import './css/buttons.scss'\n// import \"./css/nm-style.module.scss\"\n\n\nfunction Timer(props) {\n  // const [timeLength, setMinutesLength] = useState(0);\n  const [seconds, setSeconds] = useState(200); // The value (state) does not actually actually change. The function is rerendered with a whole new variable that just happens to have the same name.\n  const [isRunning, setIsRunning] = useState(false); // HOOKS: .....\n  // const [mode, setMode] = useState(\"work\"); // mode values: 'work', 'rest', 'focus', 'input'\n  const mode = 'work';\n\n  useEffect(() => {\n    if (isRunning) {\n      const id = window.setTimeout(() => {\n        setSeconds(seconds => seconds - 1)\n      }, 1000);\n      if (seconds <= 0) {\n        setIsRunning(false);\n      }\n      return () => window.clearTimeout(id); //cleanup function:....\n    }\n\n    console.log(\"Re-rendering...\")\n  }, [seconds, isRunning]); // Dependency array - rerender this entire function in order to change the value of seconds. But we don't want to do this because\n  // Uses shallow equality - so if the value is the same, it will not rerender, even if the object is different.\n\n\n  const time = (s) => {\n    const secs = s % 60 < 10 ? \"0\" + s % 60 : s % 60;\n    const mins = Math.floor(s / 60);\n    // const minsString = m < 10 ? \"0\" + m : m;\n    const tenMins = Math.floor(mins / 10);\n    const tenSecs = Math.floor(secs / 10);\n    return [tenMins, mins % 10, tenSecs, secs % 10];\n\n    // return mins + \":\" + secs;\n  }\n\n  const timeArr = time(seconds);\n\n  const restTime = time(seconds / 6);\n  console.log(\"Rest time: \" + restTime);\n\n  function setMinutes(minutes) {\n    setSeconds(minutes * 60);\n  }\n\n  function display(mode) {\n\n    return <>\n      <div id=\"timer-container\" className={isRunning ? \"circle running\" : \"circle not-running\"} >\n\n        <div id=\"dial-panel\" className=\"timer timerDimensions timerPosition circle\" onClick={() => setIsRunning(!isRunning)}>\n\n          <button onClick={() => setMinutes(45)} id=\"set-hour\"></button>\n          <button onClick={() => setMinutes(25)} id=\"set-half-hour\"></button>\n          <div id=\"time-display\">\n            <div id=\"ten-mins\">{timeArr[0]}</div>\n            <div id=\"single-mins\">{timeArr[1]}</div>\n            <div id=\"colon\">:</div>\n            <div id=\"ten-secs\">{timeArr[2]}</div>\n            <div id=\"single-secs\">{timeArr[3]}</div>\n            {/* {time(seconds)} */}\n          </div>\n          {/* {!isRunning ? <Input className=\"timerPosition\" setMinutes={setMinutes} /> : \"\"} */}\n          <Input className=\"timerPosition\" setMinutes={setMinutes} />\n        </div>\n      </div>\n\n    </>\n  }\n\n  function selectMode() {\n\n    return (\n      mode === 'work' && isRunning === true ? display('work') :\n        mode === 'rest' && isRunning === true ? display('rest') :\n          mode === 'focus' && isRunning === true ? display('focus') :\n            mode === 'input' || isRunning === false ? display('input') :\n              \"INVALID MODE\"\n    )\n  }\n\n\n  return (\n    selectMode()\n  )\n}\n\nexport default Timer;\n","import React from 'react'\n\nexport default function Task({ todo, toggleTodo }) {\n  function handleTodoClick() {\n    toggleTodo(todo.id)\n  }\n\n  return (\n    <div>\n      <label>\n          <input type='checkbox' checked={todo.complete} onChange={handleTodoClick} />\n          {todo.name}\n      </label>\n    </div>\n  )\n}\n","import React from 'react'\nimport Task from './Task'\n\n\n\nexport default function TaskList({ todos, toggleTodo }) {\n  return (\n    todos.map(todo => {\n      return <Task key={todo.id} toggleTodo={toggleTodo} todo={todo} />\n    })\n  )\n}\n","/*useState is needed to save the current list of things that need doing\nuseRef instead allows us to access the input box\nuuid will help provide a unique id to todos*/\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport TaskList from \"./TaskList\";\nimport { v4 as uuidv4 } from \"uuid\";\n// import \"./css/nm-style.module.scss\";\n\nconst LOCAL_STORAGE_KEY = 'tomatrackerApp.tasks'\n\nexport default function TaskHandler() {\n\n  const [todos, setTodos] = useState([]) //[{id: 1, name:'todo1', complete: false}]\n  const todoNameRef = useRef() //\n\n  /*\n  This checks if something's stored and if it is, it loads it\n  Note: JSON.parse converts string to an array\n  */\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedTodos) setTodos(storedTodos);\n  }, []);\n  /*\n  Anytime anything in the array changes, it will call useeffect function.\n  Note:JSON.stringify changes array into a string for local storage\n  */\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function handleAddTodo(e) {\n    console.log(\"todoNameRef:\", todoNameRef);\n    const name = todoNameRef.current.value;\n    if (name === \"\") return;\n\n    setTodos((prevTodos) => {\n      //will give us previous todos, and add one\n      return [...prevTodos, { id: uuidv4(), name: name, complete: false }];\n    });\n\n    todoNameRef.current.value = null; //clears box\n  }\n\n  function toggleTodo(id) {\n    const newTodos = [...todos]\n    /*Find the id*/\n    const todo = newTodos.find(todo => todo.id === id)\n    /*toggle that todo to it's opposite*/\n    todo.complete = !todo.complete\n    setTodos(newTodos)\n  }\n\n  function handleClearTodos() {\n    const newTodos = todos.filter(todo => !todo.complete)\n    setTodos(newTodos);\n  }\n\n  return (\n    <>\n      <TaskList todos={todos} toggleTodo={toggleTodo} />\n      <input className=\"input-textbox-lists\" ref={todoNameRef} type=\"text\" />\n      <button className=\"rounded-square\" onClick={handleAddTodo}>+</button>\n      <button className=\"rounded-square\" onClick={handleClearTodos}>-</button>\n    </>\n  )\n}\n","import React from 'react'\n\nexport default function Habit({ habit, toggleHabit }) {\n  function handleHabitClick() {\n    toggleHabit(habit.id)\n  }\n\n  return (\n    <div>\n      <label>\n          <input type='checkbox' checked={habit.complete} onChange={handleHabitClick} />\n          {habit.name}\n      </label>\n    </div>\n  )\n}","import React from 'react'\nimport Habit from './Habit'\n\n\n\nexport default function HabitList({ habits, toggleHabit }) {\n  return (\n    habits.map(habit => {\n      return <Habit key={habit.id} toggleHabit={toggleHabit} habit={habit} />\n    })\n  )\n}","/*useState is needed to save the current list of things that need doing\nuseRef instead allows us to access the input box\nuuid will help provide a unique id to habits*/\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport HabitList from \"./HabitList\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst LOCAL_STORAGE_KEY = \"tomatrackerApp.habits\";\n\nexport default function HabitHandler() {\n  const [habits, setHabits] = useState([]); //[{id: 1, name:'habit1', complete: false}]\n  const habitNameRef = useRef(); //\n\n  /*\n  This checks if something's stored and if it is, it loads it\n  Note: JSON.parse converts string to an array\n  */\n  useEffect(() => {\n    const storedHabits = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedHabits) setHabits(storedHabits);\n  }, []);\n  /*\n  Anytime anything in the array changes, it will call useeffect function.\n  Note:JSON.stringify changes array into a string for local storage\n  */\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(habits));\n  }, [habits]);\n\n  function handleAddhabit(e) {\n    console.log(\"habitNameRef:\", habitNameRef);\n    const name = habitNameRef.current.value;\n    if (name === \"\") return;\n\n    setHabits((prevHabits) => {\n      //will give us previous habits, and add one\n      return [...prevHabits, { id: uuidv4(), name: name, complete: false }];\n    });\n\n    habitNameRef.current.value = null; //clears box\n  }\n\n  function toggleHabit(id) {\n    const newHabits = [...habits];\n    /*Find the id*/\n    const habit = newHabits.find((habit) => habit.id === id);\n    /*toggle that habit to it's opposite*/\n    habit.complete = !habit.complete;\n    setHabits(newHabits);\n  }\n\n  function handleDeleteSelectedHabits() {\n    const newHabits = habits.filter((habit) => !habit.complete);\n    setHabits(newHabits);\n  }\n\n  function handleClearHabits() {\n    const newHabits = habits.map((habit) => {\n      habit.complete = false;\n      return habit;\n    });\n    setHabits(newHabits);\n  }\n\n  return (\n    <>\n      <HabitList habits={habits} toggleHabit={toggleHabit} />\n      <input className=\"input-textbox-lists\" ref={habitNameRef} type=\"text\" />\n      <button className=\"rounded-square\" onClick={handleAddhabit}>+</button>\n      <button className=\"rounded-square\" onClick={handleClearHabits}>&#8634;</button>\n      <button className=\"rounded-square\" onClick={handleDeleteSelectedHabits}>-</button>\n    </>\n  );\n}\n","import React from \"react\";\nimport Timer from \"./Timer\";\nimport TaskHandler from \"./TaskHandler\";\nimport HabitHandler from \"./HabitHandler\";\nimport './css/app.scss';\n\nfunction App() {\n  return (\n    <div className=\"flex-body-wrapper\">\n      <div className=\"flex-container-lists\">\n        <div className=\"habit-container\">\n          <HabitHandler />\n        </div>\n        <div className=\"task-container\">\n          <TaskHandler />\n        </div>\n      </div>\n\n      <div className=\"flex-container-timer\">\n        <Timer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./css/app.scss\";\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}